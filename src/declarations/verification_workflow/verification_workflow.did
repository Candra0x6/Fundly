type VerificationStatus = 
 variant {
   Approved;
   InReview;
   NeedsMoreInfo;
   Pending;
   Rejected;
 };
type VerificationRequest = 
 record {
   assignedTo: opt principal;
   comments: vec VerificationComment;
   createdAt: Time;
   documents: vec Document;
   id: text;
   msmeId: MSMEID;
   requiredDocuments: vec text;
   status: VerificationStatus;
   updatedAt: Time;
 };
type VerificationOfficer = 
 record {
   addedAt: Time;
   department: text;
   id: principal;
   name: text;
 };
type VerificationComment = 
 record {
   author: principal;
   id: text;
   isInternal: bool;
   "text": text;
   timestamp: Time;
 };
type Time = int;
type Result_2 = 
 variant {
   err: Error;
   ok: text;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: VerificationRequest;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type MSMEID = text;
type Error = 
 variant {
   AlreadyExists;
   InvalidInput;
   NotFound;
   SystemError;
   Unauthorized;
 };
type DocumentStatus = 
 variant {
   Approved;
   Pending;
   Rejected;
 };
type Document = 
 record {
   documentType: text;
   fileUrl: text;
   id: text;
   name: text;
   reviewComments: opt text;
   status: DocumentStatus;
   uploadedAt: Time;
   uploadedBy: principal;
 };
service : {
  addComment: (text, text, bool) -> (Result);
  addVerificationOfficer: (principal, text, text) -> (Result);
  assignRequest: (text, principal) -> (Result);
  createVerificationRequest: (MSMEID, vec text) -> (Result_2);
  getPendingVerificationRequests: () -> (vec VerificationRequest) query;
  getRequestsAssignedToOfficer: (principal) ->
   (vec VerificationRequest) query;
  getRequestsForMSME: (MSMEID) -> (vec VerificationRequest) query;
  getVerificationOfficers: () -> (vec VerificationOfficer) query;
  getVerificationRequest: (text) -> (Result_1) query;
  removeVerificationOfficer: (principal) -> (Result);
  reviewDocument: (text, text, DocumentStatus, opt text) -> (Result);
  setMSMERegistrationCanister: (principal) -> (Result);
  updateVerificationStatus: (text, VerificationStatus) -> (Result);
  uploadDocument: (text, text, text, text) -> (Result);
}
