type UserRole = 
 variant {
   Admin;
   Investor;
   MSME;
   Verifier;
 };
type UserProfile = 
 record {
   createdAt: Time;
   email: opt text;
   lastLogin: opt Time;
   "principal": principal;
   roles: vec UserRole;
   username: opt text;
 };
type Time = int;
type Result_5 = 
 variant {
   err: AuthError;
   ok: nat;
 };
type Result_4 = 
 variant {
   err: AuthError;
   ok: vec UserProfile;
 };
type Result_3 = 
 variant {
   err: AuthError;
   ok: text;
 };
type Result_2 = 
 variant {
   err: AuthError;
   ok;
 };
type Result_1 = 
 variant {
   err: AuthError;
   ok: UserProfile;
 };
type Result = 
 variant {
   err: AuthError;
   ok: principal;
 };
type AuthError = 
 variant {
   AlreadyExists;
   InvalidToken;
   NotAuthorized;
   OperationFailed;
   ProfileNotFound;
   SessionExpired;
 };
service : {
  addRole: (principal, UserRole) -> (Result_1);
  cleanExpiredSessions: () -> (Result_5);
  getAllUsers: () -> (Result_4);
  getMyProfile: () -> (Result_1) query;
  getUserByPrincipal: (principal) -> (Result_1);
  hasProfile: (principal) -> (bool);
  hasRole: (principal, UserRole) -> (bool) query;
  isAdmin: (principal) -> (bool) query;
  isInvestor: (principal) -> (bool) query;
  isMSME: (principal) -> (bool) query;
  isVerifier: (principal) -> (bool) query;
  login: () -> (Result_3);
  logout: (text) -> (Result_2);
  registerUser: (opt text, opt text, UserRole) -> (Result_1);
  removeRole: (principal, UserRole) -> (Result_1);
  setAdminPrincipal: (principal) -> (Result_2);
  updateProfile: (opt text, opt text) -> (Result_1);
  validateSession: (text) -> (Result) query;
}
