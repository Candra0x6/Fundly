type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TransferFromArgs = 
 record {
   amount: nat;
   created_at_time: opt Timestamp;
   fee: opt nat;
   from: Account;
   memo: opt Memo;
   spender_subaccount: opt Subaccount;
   to: Account;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: nat;
   created_at_time: opt Timestamp;
   fee: opt nat;
   from_subaccount: opt Subaccount;
   memo: opt Memo;
   to: Account;
 };
type Transaction = 
 record {
   amount: nat;
   fee: opt nat;
   from: Account;
   id: nat;
   memo: opt Memo;
   operation: text;
   timestamp: Timestamp;
   to: Account;
 };
type Timestamp = nat64;
type Subaccount = blob;
type Result_3 = 
 variant {
   err: ApproveError;
   ok: nat;
 };
type Result_2 = 
 variant {
   err: TransferError;
   ok: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Memo = blob;
type ApproveError = 
 variant {
   AllowanceChanged: record {current_allowance: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type ApproveArgs = 
 record {
   amount: nat;
   created_at_time: opt Timestamp;
   expected_allowance: opt nat;
   expires_at: opt nat64;
   fee: opt nat;
   from_subaccount: opt Subaccount;
   memo: opt Memo;
   spender: Account;
 };
type Allowance = 
 record {
   allowance: nat;
   expires_at: opt nat64;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : {
  burn: (Account, nat) -> (Result_1);
  getRecentTransactions: (nat) -> (vec Transaction) query;
  getTransaction: (nat) -> (opt Transaction) query;
  icrc1_balance_of: (Account) -> (nat) query;
  icrc1_decimals: () -> (nat8) query;
  icrc1_fee: () -> (nat) query;
  icrc1_metadata: () -> (vec record {
                               text;
                               Value;
                             }) query;
  icrc1_minter: () -> (principal) query;
  icrc1_name: () -> (text) query;
  icrc1_symbol: () -> (text) query;
  icrc1_total_supply: () -> (nat) query;
  icrc1_transfer: (TransferArgs) -> (Result_2);
  icrc2_allowance: (record {
                      account: Account;
                      spender: Account;
                    }) -> (Allowance) query;
  icrc2_approve: (ApproveArgs) -> (Result_3);
  icrc2_transfer_from: (TransferFromArgs) -> (Result_2);
  initialize: () -> ();
  mint: (Account, nat) -> (Result_1);
  setFee: (nat) -> (Result);
  setMinter: (principal) -> (Result);
}
